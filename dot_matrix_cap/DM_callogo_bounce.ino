#include <Wire.h>
#include <Adafruit_LIS3DH.h>
#include <Adafruit_Protomatter.h>
#include <Adafruit_GFX.h>
#include <SPI.h>

#define HEIGHT 64
#define WIDTH 64
#define MAX_FPS 45
uint8_t addrPins[] = {17,18,19,20,21};
uint8_t rgbPins[] = {7,8,9,10,11,12};
uint8_t clockPin = 14;
uint8_t latchPin = 15;
uint8_t oePin = 16;

Adafruit_Protomatter matrix(WIDTH, 6, 1, rgbPins, 5, addrPins, clockPin, latchPin, oePin, true);
Adafruit_LIS3DH accel = Adafruit_LIS3DH();

float counter;

struct logo {
  int x;
  int y;
  int dx;
  int dy;
};

struct logo l;

const uint16_t cal_logo[520] PROGMEM={
0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001,   // 0x0010 (16) pixels
0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,   // 0x0020 (32) pixels
0x0000, 0x0000, 0xf79E, 0xf79E, 0xf79E, 0xf79E, 0xf79E, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000,   // 0x0030 (48) pixels
0xf79E, 0xf79E, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xf79E, 0xf79E, 0xE321, 0xE321, 0xE321,   // 0x0040 (64) pixels
0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001,   // 0x0050 (80) pixels
0x0001, 0x0001, 0x0000, 0xf79E, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001,   // 0x0060 (96) pixels
0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321,   // 0x0070 (112) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0xE321,   // 0x0080 (128) pixels
0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xE321, 0xE321, 0x0000,   // 0x0090 (144) pixels
0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0x0000, 0x0000, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321,   // 0x00A0 (160) pixels
0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321,   // 0x00B0 (176) pixels
0xE321, 0x0000, 0xE321, 0xE321, 0x0000, 0x0001, 0x0000, 0xf79E, 0xf79E, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xE321,   // 0x00C0 (192) pixels
0xE321, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0xE321, 0xE321, 0x0000, 0x0001,   // 0x00D0 (208) pixels
0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0xf79E, 0xf79E, 0xf79E,   // 0x00E0 (224) pixels
0x0000, 0x0000, 0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000,   // 0x00F0 (240) pixels
0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0xE321, 0xE321, 0x0000, 0xE321,   // 0x0100 (256) pixels
0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E,   // 0x0110 (272) pixels
0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0xE321, 0x0000, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E,   // 0x0120 (288) pixels
0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0xE321, 0xE321, 0x0000, 0x0000,   // 0x0130 (304) pixels
0xE321, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0x0001,   // 0x0140 (320) pixels
0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0xE321, 0x0000, 0x0000, 0x0001, 0x0001,   // 0x0150 (336) pixels
0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0x0000,   // 0x0160 (352) pixels
0xE321, 0xE321, 0x0000, 0x0000, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0xf79E,   // 0x0170 (368) pixels
0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0xE321, 0xE321, 0xE321, 0x0000, 0xE321, 0xE321, 0xE321, 0x0000, 0xE321,   // 0x0180 (384) pixels
0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0190 (400) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000,   // 0x01A0 (416) pixels
0x0001, 0x0001, 0x0001, 0x0000, 0xf79E, 0xf79E, 0x0000, 0x0000, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000,   // 0x01B0 (432) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321,   // 0x01C0 (448) pixels
0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321,   // 0x01D0 (464) pixels
0xE321, 0xE321, 0x0000, 0x0001, 0x0001, 0x0000, 0xf79E, 0xE321, 0xE321, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01E0 (480) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE321, 0xE321, 0xE321, 0xE321, 0xE321, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001,   // 0x01F0 (496) pixels
0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,   // 0x0200 (512) pixels
0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001
};

void setup() {
  Serial.begin(115200);
  ProtomatterStatus status = matrix.begin();
  matrix.setRotation(3);
  matrix.setTextSize(1);
  matrix.setTextColor(matrix.color565(255, 25, 255));
  matrix.printf("Testing...\n");
  matrix.setTextColor(matrix.color565(25, 255, 255));
  matrix.printf("Sahil\nTandale");
  matrix.show();
  delay(300);


  l.x = 12;
  l.y = 12;
  l.dx = -1;
  l.dy = -1;
}

void loop() {
  long begin = millis();
  delay(60);

  matrix.fillScreen(matrix.color565(0, 3, 8));
  positionChange();
  matrix.drawRGBBitmap(l.x,l.y,cal_logo,26,20);
  matrix.drawRect(0, 0, 64, 64, matrix.color565(160, 103, 10));

  matrix.show();

  long end = millis();
  float tDelta = end-begin;
  float delta = tDelta/1000;
  counter = (float(millis())/1000) - delta;
}

void positionChange() {
  if(l.x >= (WIDTH-26) || l.x <= 1) {
      l.dx = l.dx * -1;
  }
  if(l.y >= (HEIGHT-21) || l.y <= 1) {
    l.dy = l.dy * -1;
  }
  l.x = l.x + l.dx;
  l.y = l.y + l.dy;
}